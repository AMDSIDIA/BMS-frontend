"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/performance/page",{

/***/ "(app-pages-browser)/./services/api.ts":
/*!*************************!*\
  !*** ./services/api.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiCall: () => (/* binding */ apiCall),\n/* harmony export */   authAPI: () => (/* binding */ authAPI),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   offresAPI: () => (/* binding */ offresAPI),\n/* harmony export */   performanceAPI: () => (/* binding */ performanceAPI),\n/* harmony export */   scheduledSearchesAPI: () => (/* binding */ scheduledSearchesAPI),\n/* harmony export */   usersAPI: () => (/* binding */ usersAPI)\n/* harmony export */ });\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ \"(app-pages-browser)/./utils/logger.ts\");\n/* harmony import */ var _config_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/api */ \"(app-pages-browser)/./config/api.ts\");\n\n\n// Configuration de l'API\nconst API_BASE_URL = _config_api__WEBPACK_IMPORTED_MODULE_1__.API_CONFIG.BASE_URL;\n// Log de la configuration de l'API\n(0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Configuration: NEXT_PUBLIC_API_URL=\".concat(\"http://localhost:5000\" || 0), 'API');\n(0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"URL de base utilis\\xe9e: \".concat(API_BASE_URL), 'API');\n// Fonction utilitaire pour les appels API\nconst apiCall = async function(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const url = \"\".concat(API_BASE_URL).concat(endpoint);\n    // Récupérer le token d'authentification\n    const token =  true ? localStorage.getItem('token') : 0;\n    // Logs détaillés pour le débogage\n    (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Appel vers: \".concat(url), 'API');\n    (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Token pr\\xe9sent: \".concat(token ? 'OUI' : 'NON'), 'API');\n    if (token) {\n        (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Token (premiers caract\\xe8res): \".concat(token.substring(0, 20), \"...\"), 'API');\n        (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Longueur du token: \".concat(token.length), 'API');\n    }\n    const defaultOptions = {\n        headers: {\n            'Content-Type': 'application/json',\n            ...token && {\n                'Authorization': \"Bearer \".concat(token)\n            },\n            ...options.headers\n        },\n        ...options\n    };\n    try {\n        (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Envoi de la requ\\xeate vers: \".concat(url), 'API');\n        const response = await fetch(url, defaultOptions);\n        // Log de la réponse\n        (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"R\\xe9ponse re\\xe7ue: \".concat(response.status, \" \").concat(response.statusText), 'API');\n        (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Headers de r\\xe9ponse: \".concat(JSON.stringify(Object.fromEntries(response.headers.entries()))), 'API');\n        if (!response.ok) {\n            let errorData = {};\n            try {\n                errorData = await response.json();\n            } catch (parseError) {\n                (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"Impossible de parser le body d'erreur: \".concat(parseError.message), 'API');\n                errorData = {\n                    error: \"Erreur HTTP \".concat(response.status, \": \").concat(response.statusText)\n                };\n            }\n            // Log détaillé de l'erreur\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.apiError(endpoint, new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText)), response, {\n                status: response.status,\n                statusText: response.statusText,\n                url: url,\n                errorData: errorData,\n                headers: Object.fromEntries(response.headers.entries())\n            });\n            // Gestion spécifique des erreurs d'authentification\n            if (response.status === 401) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.authError('Token invalide', new Error(errorData.error || 'Token expiré ou invalide'), errorData);\n                // Supprimer le token invalide\n                if (true) {\n                    localStorage.removeItem('token');\n                    localStorage.removeItem('user');\n                    localStorage.removeItem('userRole');\n                    (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)('Token invalide supprimé du localStorage', 'API');\n                }\n                // Rediriger vers la page de login\n                if ( true && window.location.pathname !== '/login') {\n                    (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)('Redirection vers /login', 'API');\n                    window.location.href = '/login';\n                }\n                throw new Error('Token invalide - Redirection vers la connexion');\n            }\n            // Créer un message d'erreur détaillé\n            const errorMessage = errorData.error || errorData.message || \"Erreur HTTP \".concat(response.status, \": \").concat(response.statusText);\n            throw new Error(errorMessage);\n        }\n        let data;\n        try {\n            data = await response.json();\n            (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Succ\\xe8s: \".concat(endpoint), 'API', data);\n        } catch (parseError) {\n            (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logError)(\"Erreur lors du parsing de la r\\xe9ponse: \".concat(parseError.message), parseError, 'API');\n            throw new Error(\"Erreur lors du parsing de la r\\xe9ponse: \".concat(parseError.message));\n        }\n        return data;\n    } catch (error) {\n        // Log détaillé de l'erreur\n        _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.apiError(endpoint, error, undefined, {\n            url: url,\n            timestamp: new Date().toISOString()\n        });\n        // Si c'est une erreur de token invalide, ne pas la relancer\n        if (error.message === 'Token invalide - Redirection vers la connexion') {\n            throw error;\n        }\n        // Pour les autres erreurs, relancer avec plus de contexte\n        let enhancedMessage = \"Erreur lors de la r\\xe9cup\\xe9ration des donn\\xe9es: \".concat(error.message);\n        // Messages d'erreur spécifiques pour le suivi de performance\n        if (endpoint.includes('/performance/')) {\n            enhancedMessage = 'Impossible de charger les données de performance. Vérifiez votre connexion et réessayez.';\n        }\n        (0,_utils_logger__WEBPACK_IMPORTED_MODULE_0__.logError)(\"Message d'erreur am\\xe9lior\\xe9: \".concat(enhancedMessage), error, 'API');\n        throw new Error(enhancedMessage);\n    }\n};\n// Fonctions d'authentification\nconst authAPI = {\n    login: async (credentials)=>{\n        return apiCall('/api/auth/login', {\n            method: 'POST',\n            body: JSON.stringify(credentials)\n        });\n    },\n    logout: async ()=>{\n        // Supprimer le token du localStorage\n        if (true) {\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            localStorage.removeItem('userRole');\n        }\n        return {\n            success: true,\n            message: 'Déconnexion réussie'\n        };\n    },\n    register: async (userData)=>{\n        return apiCall('/api/auth/register', {\n            method: 'POST',\n            body: JSON.stringify(userData)\n        });\n    },\n    verifyToken: async ()=>{\n        return apiCall('/api/auth/verify');\n    }\n};\n// Fonctions pour les offres\nconst offresAPI = {\n    getAll: async ()=>{\n        return apiCall('/api/offres');\n    },\n    create: async (offreData)=>{\n        return apiCall('/api/offres', {\n            method: 'POST',\n            body: JSON.stringify(offreData)\n        });\n    },\n    update: async (id, offreData)=>{\n        return apiCall(\"/api/offres/\".concat(id), {\n            method: 'PUT',\n            body: JSON.stringify(offreData)\n        });\n    },\n    delete: async (id)=>{\n        return apiCall(\"/api/offres/\".concat(id), {\n            method: 'DELETE'\n        });\n    },\n    validate: async (id, validationData)=>{\n        return apiCall(\"/api/offres/\".concat(id, \"/validate\"), {\n            method: 'PATCH',\n            body: JSON.stringify(validationData)\n        });\n    }\n};\n// Fonctions pour le suivi de performance\nconst performanceAPI = {\n    getOverview: async (startDate, endDate)=>{\n        const queryParams = startDate && endDate ? \"?startDate=\".concat(startDate, \"&endDate=\").concat(endDate) : '';\n        return apiCall(\"/api/performance/overview\".concat(queryParams));\n    },\n    getPoles: async (startDate, endDate)=>{\n        const queryParams = startDate && endDate ? \"?startDate=\".concat(startDate, \"&endDate=\").concat(endDate) : '';\n        return apiCall(\"/api/performance/poles\".concat(queryParams));\n    },\n    getPolesDetailed: async (startDate, endDate)=>{\n        const queryParams = startDate && endDate ? \"?startDate=\".concat(startDate, \"&endDate=\").concat(endDate) : '';\n        return apiCall(\"/api/performance/poles-detailed\".concat(queryParams));\n    },\n    getTrends: async ()=>{\n        return apiCall('/api/performance/trends');\n    },\n    getCommerciaux: async (startDate, endDate)=>{\n        const queryParams = startDate && endDate ? \"?startDate=\".concat(startDate, \"&endDate=\").concat(endDate) : '';\n        return apiCall(\"/api/performance/commerciaux\".concat(queryParams));\n    },\n    getMetrics: async ()=>{\n        return apiCall('/api/performance/metrics');\n    }\n};\n// Fonctions pour les utilisateurs\nconst usersAPI = {\n    getAll: async ()=>{\n        return apiCall('/api/users');\n    },\n    getById: async (id)=>{\n        return apiCall(\"/api/users/\".concat(id));\n    },\n    update: async (id, userData)=>{\n        return apiCall(\"/api/users/\".concat(id), {\n            method: 'PUT',\n            body: JSON.stringify(userData)\n        });\n    },\n    delete: async (id)=>{\n        return apiCall(\"/api/users/\".concat(id), {\n            method: 'DELETE'\n        });\n    }\n};\n// Fonctions pour les recherches programmées\nconst scheduledSearchesAPI = {\n    getAll: async (userId)=>{\n        return apiCall(\"/api/scheduled-searches?userId=\".concat(userId));\n    },\n    getOptions: async ()=>{\n        return apiCall('/api/scheduled-searches/options');\n    },\n    create: async (searchData)=>{\n        return apiCall('/api/scheduled-searches', {\n            method: 'POST',\n            body: JSON.stringify(searchData)\n        });\n    },\n    update: async (searchData)=>{\n        return apiCall('/api/scheduled-searches', {\n            method: 'PUT',\n            body: JSON.stringify(searchData)\n        });\n    },\n    delete: async (searchData)=>{\n        return apiCall('/api/scheduled-searches', {\n            method: 'DELETE',\n            body: JSON.stringify(searchData)\n        });\n    },\n    getSavedKeywords: async (userId)=>{\n        return apiCall(\"/api/scheduled-searches/saved-keywords?userId=\".concat(userId));\n    },\n    saveKeywords: async (keywordData)=>{\n        return apiCall('/api/scheduled-searches/saved-keywords', {\n            method: 'POST',\n            body: JSON.stringify(keywordData)\n        });\n    },\n    deleteSavedKeywords: async (id, userId)=>{\n        return apiCall(\"/api/scheduled-searches/saved-keywords/\".concat(id), {\n            method: 'DELETE',\n            body: JSON.stringify({\n                userId\n            })\n        });\n    },\n    getSearchStats: async (userId)=>{\n        const queryParams = userId ? \"?userId=\".concat(userId) : '';\n        return apiCall(\"/api/scheduled-searches/search-stats\".concat(queryParams));\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    auth: authAPI,\n    offres: offresAPI,\n    performance: performanceAPI,\n    users: usersAPI,\n    scheduledSearches: scheduledSearchesAPI\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/api.ts\n"));

/***/ })

});